<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">

	<sql id="select-sql">
		select board_no, board_header, board_name, board_content, board_date, board_count, board_password, board_writer
		from publicBoard
	</sql>



<!-- 	<sql id="select-sql">
		select member_id id, password, member_name name, email, mileage  from member
	</sql>
	
	<insert id="insertMember" parameterType="member">
		insert into member values (#{id}, #{password}, #{name}, #{email}, #{mileage})
	</insert>
	
	공통
	<update id="updateMemberById" parameterType="member">
		update member
		set password = #{password},
			 member_name = #{name},
			 email = #{email},
			 mileage = #{mileage}
		where member_id = #{id}
	</update>
	
	<delete id="deleteMemberById" parameterType="string">
		delete from member where member_id = #{id}
	</delete>
	
	조회
	<select id="selectMemberById" parameterType="string" resultType="member">
		<include refid="select-sql"/>
		where member_id = #{value}
	</select>
	<select id="selectMemberList" resultType="member">
		<include refid="select-sql"/>
	</select>
   
	<select id="selectMemberByName" parameterType="string" resultType="member">
		<include refid="select-sql"/>
		where member_name like '%'||#{value}||'%'
	</select>
	
	마일리지 범위로 회원 조회
	
	 parameterType에 ? 가 여러개인 경우 Map 이나 VO를 선언한다.
	  - VO : VO가 있는 경우 - Data Type으로 사용되는 VO를 이용하는 경우.
	  - Map : VO가 없는 경우 - where  조건등에서 임시로 ? 에 사용되는 값들일 경우.
	  	-> 파라미터 매핑에 map의 키값을 설정한다.  #{startMileage} -> map객체의 get("startMileage") 리턴 값을 ?에 넣어라. 
	
	<select id="selectMemberByMileageRange" resultType="member" parameterType="hashmap">
		<include refid="select-sql"/>
		where mileage between #{startMileage} and #{endMileage}
	</select>
   
   
   WEB에서 추가
   paging을 위한 select
   <select id="selectMemberListPaging" resultType="member" parameterType="hashmap">
      select member_id id, password, member_name name, email, mileage
      from  (select ceil(rownum/#{itemPerPage}) page, member_id, password, member_name, email, mileage
               from(select member_id, password, member_name, email, mileage
                       from member order by member_id desc
                      )
               )
      where page = #{page}
   </select>
   <select id="selectCountMember" resultType="_int">
      select count(member_id) from member
   </select> -->
   
   <select id="selectBoardListPaging" resultType="board" parameterType="hashmap">
   	select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
      from  (select ceil(rownum/#{itemPerPage}) page, board_no , board_header, board_name, board_content, board_date, board_count, board_password, board_writer 
               from(select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
                       from publicBoard order by board_no desc
                      )
               )
      where page = #{page}
   </select>
   
   
   
   <insert id="insertboard" parameterType="board">
  	 	<selectKey resultType="_int" keyProperty="board_no" order="BEFORE">
	 		select  board_tb_no_seq.nextVal from dual
	 	</selectKey>
		insert into publicBoard values (#{board_no}, #{board_header}, #{board_name}, #{board_content}, #{board_date},  #{board_count}, #{board_password}, #{board_writer})
	</insert>
   
   <select id="selectBoardById" resultType="CodeTable">		
		select CODEOPTION from codetable where CODEVALUE = '말머리'
   </select> 
   
   <update id="updateBoardById" parameterType="board">
		update publicBoard
		set  
		<!-- <selectKey resultType="_int" keyProperty="board_no" order="BEFORE">
	 		select  board_tb_no_seq.nextVal from dual
	 	</selectKey> -->
			 board_no = #{board_no},
			 board_header = #{board_header},
			 board_name = #{board_name},
			 board_content = #{board_content},
			 board_date= #{board_date},
			 board_count = #{board_count},
			 board_password=#{board_password},
			 board_writer = #{board_writer}
		where board_no = #{board_no}
	</update>
	
	<delete id="deleteBoardById" parameterType="_int">
		delete from publicBoard where board_no = #{value}
	</delete>
	
	<select id="selectlistById" parameterType="_int" resultType="board">
		select board_no, board_header, board_name, board_content, board_date, board_count, board_password, board_writer
		from publicBoard
		where board_no = #{value}
	</select>
	
	<select id="selectBoardList" resultType="board">
		<include refid="select-sql"/>
	</select>
	
	<select id="selectSequence" resultType="_int">
		select  board_tb_no_seq.nextVal from dual
	</select>
	
	<select id="selectCountBoardCount" resultType="_int">
		select  board_tb_no_count.nextVal from dual
	</select> 
	
	<update id="updateCount" parameterType="board">
		update publicBoard 
		set board_count=#{board_count}+1 
		where board_no= #{board_no}
	</update>
	
	<select id="selectCountBoard" resultType="_int">
		select count(board_no) from publicBoard
	</select>
	
	<select id="selectCountBoardname" resultType="_int" parameterType="string">
		select count(board_no) from publicBoard where board_name=#{value}
	</select>
	
	<select id="selectCountBoardpassword" resultType="_int" parameterType="string">
		select count(board_no) from publicBoard where board_password=#{value}
	</select>
	
	<select id="selectBoardbyname" parameterType="string" resultType="board">
		select board_no, board_header, board_name, board_content, board_date, board_count, board_password, board_writer
		from publicBoard
		where board_name= #{value}
	</select>
	
	<select id="selectBoardbypassword" parameterType="string" resultType="board">
		select board_no, board_header, board_name, board_content, board_date, board_count, board_password, board_writer
		from publicBoard
		where board_password= #{value}
	</select>
	
   <select id="selectListPaging" resultType="board" parameterType="hashmap">
   	select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
      from  (select ceil(rownum/#{itemPerPage}) page, board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
               from(select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
                       from publicBoard
                       where board_name=#{option}
                       order by board_no desc
                      )
               )
      where page = #{page}
   </select>
   
   <select id="selectListPagingwriter" resultType="board" parameterType="hashmap">
   	select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
      from  (select ceil(rownum/#{itemPerPage}) page, board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
               from(select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
                       from publicBoard
                       where board_writer=#{option}
                       order by board_no desc
                      )
               )
      where page = #{page}
   </select>
   
   
   
   
   <!-- 공지사항 -->
   
   
   <select id="selectoperatorListPaging" resultType="operatorboard" parameterType="hashmap">
   	select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
      from  (select ceil(rownum/#{itemPerPage}) page, board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
               from(select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
                       from operatorBoard
                       order by board_no desc
                      )
               )
      where page = #{page}
   </select>

	<select id="selectoperatorList" resultType="operatorboard">
			select board_no , board_header, board_name, board_content, board_date, board_count, board_password , board_writer
			from operatorBoard
	</select>
	
	
	
	
   <insert id="operatorinsertboard" parameterType="operatorboard">
  	 	<selectKey resultType="_int" keyProperty="board_no" order="BEFORE">
	 		select  operator_tb_no_seq.nextVal from dual
	 	</selectKey>
		insert into operatorBoard values (#{board_no}, #{board_header}, #{board_name}, #{board_content}, #{board_date},  #{board_count}, #{board_password}, #{board_writer})
	</insert>
    
   
   <update id="updateoperatorById" parameterType="operatorboard">
		update operatorBoard
		set  
		<!-- <selectKey resultType="_int" keyProperty="board_no" order="BEFORE">
	 		select  board_tb_no_seq.nextVal from dual
	 	</selectKey> -->
			 board_no = #{board_no},
			 board_header = #{board_header},
			 board_name = #{board_name},
			 board_content = #{board_content},
			 board_date= #{board_date},
			 board_count = #{board_count},
			 board_password=#{board_password},
			 board_writer = #{board_writer}
		where board_no = #{board_no}
	</update>
	
	<delete id="deleteoperatorById" parameterType="_int">
		delete from operatorBoard where board_no = #{value}
	</delete>
	
	<select id="selectoperatorlistById" parameterType="_int" resultType="operatorboard">
		select board_no, board_header, board_name, board_content, board_date, board_count, board_password, board_writer
		from operatorBoard
		where board_no = #{value}
	</select>
	
	<select id="operatorselectSequence" resultType="_int">
		select  operator_tb_no_seq.nextVal from dual
	</select>
	
	<select id="operatorselectCountBoardCount" resultType="_int">
		select  operator_tb_no_count.nextVal from dual
	</select> 
	
	<update id="operatorupdateCount" parameterType="operatorboard">
		update operatorBoard 
		set board_count=#{board_count}+1 
		where board_no= #{board_no}
	</update>
	
	<select id="selectCountoperator" resultType="_int">
		select count(board_no) from operatorBoard
	</select>
	
	<select id="selectCountoperatorname" resultType="_int" parameterType="string">
		select count(board_no) from operatorBoard where board_name=#{value}
	</select>
	
	<select id="selectCountoperatorpassword" resultType="_int" parameterType="string">
		select count(board_no) from operatorBoard where board_password=#{value}
	</select>
</mapper>













